theme(legend.position = "null")
lines(LSC, lwd = 3, col = "black")
lines (lwd = 3, col = "black")
lines (aes(x = forma, y = altura), lwd = 3, col = "black")
lines (ceramicas, lwd = 3, col = "black")
ggplot(data = ceramicas, aes(x = forma, y = altura)) +
geom_point(aes(color = as.factor(altura)), shape = 1) +
stat_function(fun = function(x){predict(modelo,
newdata = data.frame(forma = x),
type = "response")}) +
theme_bw() +
labs(title = "Regresión logística",
y = "Probabilidad Altura") +
theme(legend.position = "none")
lines (ceramicas, lwd = 3, col = "black")
ggplot(data = ceramicas, aes(x = forma, y = altura)) +
geom_point(aes(color = as.factor(altura)), shape = 1) +
stat_function(fun = function(x){predict(modelo,
newdata = data.frame(forma = x),
type = "response")}) +
theme_bw() +
labs(title = "Regresión logística",
y = "Probabilidad Altura") +
theme(legend.position = "none") +
lines (ceramicas, lwd = 3, col = "black")
ggplot(data = ceramicas, aes(x = forma, y = altura)) +
geom_point(aes(color = as.factor(altura)), shape = 1) +
stat_function(fun = function(x){predict(modelo,
newdata = data.frame(forma = x),
type = "response")}) +
theme_bw() +
labs(title = "Regresión logística",
y = "Probabilidad Altura") +
theme(legend.position = "none") +
lines (ceramicas, lwd = 3, col = "black")
ggplot(data = ceramicas, aes(x = forma, y = altura)) +
geom_point(aes(color = as.factor(altura)), shape = 1) +
stat_function(fun = function(x){predict(modelo,
newdata = data.frame(forma = x),
type = "response")}) +
theme_bw() +
labs(title = "Regresión logística",
y = "Probabilidad Altura") +
theme(legend.position = "none") +
lines (ceramicas, lwd = 3, col = "black")
ggplot(data = ceramicas, aes(x = forma, y = altura, linetype = integer)) +
geom_point(aes(color = as.factor(altura)), shape = 1) +
stat_function(fun = function(x){predict(modelo,
newdata = data.frame(forma = x),
type = "response")}) +
theme_bw() +
labs(title = "Regresión logística",
y = "Probabilidad Altura") +
theme(legend.position = "none")
ggplot(data = ceramicas, aes(x = forma, y = altura, linetype = integer)) +
geom_point(aes(color = as.factor(altura)), shape = 1) +
stat_function(fun = function(x){predict(modelo,
newdata = data.frame(forma = x),
type = "response")}) +
theme_bw() +
labs(title = "Regresión logística",
y = "Probabilidad Altura") +
theme(legend.position = "none")
theme(legend.position = "none")
theme(legend.position = "none")
ggplot(data = ceramicas, aes(x = forma, y = altura, color = "red")) +
geom_point(aes(color = as.factor(altura)), shape = 1) +
stat_function(fun = function(x){predict(modelo,
newdata = data.frame(forma = x),
type = "response")}) +
theme_bw() +
labs(title = "Regresión logística",
y = "Probabilidad Altura") +
theme(legend.position = "none")
ggplot(data = ceramicas, aes(x = forma, y = altura)) +
geom_point(aes(color = as.factor(altura)), shape = 1) +
stat_function(fun = function(x){predict(modelo,
newdata = data.frame(forma = x),
type = "response")}) +
theme_bw() +
labs(title = "Regresión logística",
y = "Probabilidad Altura") +
theme(legend.position = "none")
ggplot(data = ceramicas, aes(x = forma, y = altura)) +
geom_point(aes(color = as.factor(altura)), shape = 1) +
stat_function(fun = function(x){predict(modelo,
newdata = data.frame(forma = x),
type = "response")}) +
theme_bw() +
labs(title = "Regresión logística",
y = "Probabilidad Altura") +
theme(legend.position = "none")
library(DT)
datatable(ceramicas)
library(readxl)
copas <- read_excel("E:\\trabajo\\copas2.xlsx")
View(copas)
ceramicas = as.data.frame(copas)
is.data.frame(ceramicas)
ceramicas <- ceramicas %>%
select(default, balance) %>%
mutate(default = recode(default,
"Kylix"  = 0,
"Lekythos" = 1,
"Figurada"= 0,
"Barniz Negro" = 1))
ceramicas <- ceramicas %>%
select(default, balance) %>%
mutate(default = recode(default,
"Kylix"  = 0,
"Lekythos" = 1,
"Figurada"= 0,
"Barniz Negro" = 1))
library(ISLR)
ceramicas <- ceramicas %>%
select(default, balance) %>%
mutate(default = recode(default,
"Kylix"  = 0,
"Lekythos" = 1,
"Figurada"= 0,
"Barniz Negro" = 1))
library(tidyverse)
library(caret)
library(DT)
datatable(ceramicas)
ceramicas <- ceramicas %>%
select(ceramicas$Forma, ceramicas$Tecnica) %>%
mutate(ceramicas$Forma = recode(ceramicas$Forma,
ceramicas <- ceramicas %>%
select(ceramicas$Forma, ceramicas$Tecnica) %>%
mutate(ceramicas$Forma = recode(ceramicas$Forma,
ceramicas <- ceramicas %>%
select(ceramicas$Forma, ceramicas$Tecnica) %>%
mutate(ceramicas$Forma = recode(ceramicas$Forma,
ceramicas <- ceramicas %>%
select(ceramicas$Forma, ceramicas$Tecnica) %>%
mutate(ceramicas$Forma = recode(ceramicas$Forma,
mutate(ceramicas$Tecnica = recode(ceramicas$Tecnica,
ceramicas <- ceramicas %>%
select(ceramicas$Forma, ceramicas$Tecnica) %>%
mutate(ceramicas$Forma, recode(ceramicas$Forma,
"Kylix"  = 0,
"Lekythos" = 1))
datatable(ceramicas)
ceramicas$Forma=factor (ceramicas$Forma, levels = c('Kylix', 'Lekythos'), labels = c ("0", "1"))
ceramicas$Tecnica=factor (ceramicas$Tecnica, levels = c('Figurada', 'Barniz Negro'), labels = c ("0", "1"))
datatable(ceramicas)
View (ceramicas)
# type = "response" devuelve las predicciones en forma de probabilidad en lugar de en log_ODDs
curve(predict(modelo, data.frame(borde = x), type = "response"),
col = "firebrick", lwd = 2.5, add = TRUE)
forma = ceramicas$Forma
tecnica = ceramicas$Tecnica
borde = na.omit (ceramicas$`Diam. Borde`)
base = na.omit (ceramicas$`Diam. Base`)
altura = na.omit (ceramicas$Altura)
borde <- as.numeric(borde)
base <- as.numeric(base)
altura <- as.numeric(altura)
#Con la función glm () ajustamos el modelo.
modelo <- glm (forma ~ borde, data = ceramicas, family = binomial)
modelo1 <- glm (forma ~ altura, data = ceramicas, family = binomial)
summary (modelo)
summary(modelo1)
confint(object = modelo, level = 0.95)
confint(object = modelo1, level = 0.95)
as.numeric(forma)
as.numeric(borde)
plot(forma ~ borde, ceramicas, col = "darkblue",
main = "Modelo regresión logística",
ylab = "P(forma1|borde)",
xlab = "ceramicas", pch = "I")
# type = "response" devuelve las predicciones en forma de probabilidad en lugar de en log_ODDs
curve(predict(modelo, data.frame(borde = x), type = "response"),
col = "firebrick", lwd = 2.5, add = TRUE)
gc()
library(readxl)
copas <- read_excel("E:\\trabajo\\copas2.xlsx")
View(copas)
ceramicas = as.data.frame(copas)
is.data.frame(ceramicas)
View (ceramicas)
library(ISLR)
library(tidyverse)
library(caret)
library(DT)
datatable(ceramicas)
forma = ceramicas$Forma
tecnica = ceramicas$Tecnica
borde = na.omit (ceramicas$`Diam. Borde`)
base = na.omit (ceramicas$`Diam. Base`)
altura = na.omit (ceramicas$Altura)
borde <- as.numeric(borde)
base <- as.numeric(base)
altura <- as.numeric(altura)
#Con la función glm () ajustamos el modelo.
modelo <- glm (forma ~ borde, data = ceramicas, family = binomial)
modelo1 <- glm (forma ~ altura, data = ceramicas, family = binomial)
summary (modelo)
summary(modelo1)
ggplot(data = ceramicas, aes(x = forma, y = borde)) +
geom_point(aes(color = as.factor(borde)), shape = 1) +
stat_function(fun = function(x){predict(modelo,
newdata = data.frame(forma = x),
type = "response")}) +
theme_bw() +
labs(title = "Regresión logística",
y = "Probabilidad Altura") +
theme(legend.position = "none")
curve(predict(modelo, data.frame(borde = x), type = "response"),
col = "firebrick", lwd = 2.5, add = TRUE)
ggplot(data = ceramicas, aes(x = forma, y = borde)) +
geom_point(aes(color = as.factor(borde)), shape = 1) +
stat_function(fun = function(x){predict(modelo,
newdata = data.frame(forma = x),
type = "response")}) +
theme_bw() +
labs(title = "Regresión logística",
y = "Probabilidad Altura") +
theme(legend.position = "none")
curve(predict(modelo, data.frame(borde = x), type = "response"),
col = "firebrick", lwd = 2.5, add = TRUE)
curve(predict(ceramicas, data.frame(borde = x), type = "response"),
col = "firebrick", lwd = 2.5, add = TRUE)
curve(predict(modelo, data.frame(borde = x), type = "response"),
col = "firebrick", lwd = 2.5, add = TRUE)
ggplot(data = ceramicas, aes(x = forma, y = borde)) +
geom_point(aes(color = as.factor(borde)), shape = 1) +
stat_function(fun = function(x){predict(modelo,
newdata = data.frame(forma = x),
type = "response")}) +
theme_bw() +
labs(title = "Regresión logística",
y = "Probabilidad Altura") +
theme(legend.position = "none") +
curve(predict(modelo, data.frame(borde = x), type = "response"),
col = "firebrick", lwd = 2.5, add = TRUE)
ggplot(data = ceramicas, aes(x = forma, y = borde)) +
geom_point(aes(color = as.factor(borde)), shape = 1) +
stat_function(fun = function(x){predict(modelo,
newdata = data.frame(forma = x),
type = "response")}) +
theme_bw() +
labs(title = "Regresión logística",
y = "Probabilidad Altura") +
theme(legend.position = "none") +
curve(predict(ceramicas, data.frame(borde = x), type = "response"),
col = "firebrick", lwd = 2.5, add = TRUE)
Plo1 = ggplot(data = ceramicas, aes(x = forma, y = borde)) +
geom_point(aes(color = as.factor(borde)), shape = 1) +
stat_function(fun = function(x){predict(modelo,
newdata = data.frame(forma = x),
type = "response")}) +
theme_bw() +
labs(title = "Regresión logística",
y = "Probabilidad Altura") +
theme(legend.position = "none")
curve(predict(Plot1, data.frame(borde = x), type = "response"),
col = "firebrick", lwd = 2.5, add = TRUE)
Plot1 = ggplot(data = ceramicas, aes(x = forma, y = borde)) +
geom_point(aes(color = as.factor(borde)), shape = 1) +
stat_function(fun = function(x){predict(modelo,
newdata = data.frame(forma = x),
type = "response")}) +
theme_bw() +
labs(title = "Regresión logística",
y = "Probabilidad Altura") +
theme(legend.position = "none")
curve(predict(Plot1, data.frame(borde = x), type = "response"),
col = "firebrick", lwd = 2.5, add = TRUE)
class(altura)
altura = na.omit (ceramicas$Altura)
class(altura)
forma = ceramicas$Forma
class(forma)
borde <- as.numeric(borde)
base <- as.numeric(base)
altura <- as.numeric(altura)
#Con la función glm () ajustamos el modelo.
modelo <- glm (forma ~ borde, data = ceramicas, family = binomial)
modelo1 <- glm (forma ~ altura, data = ceramicas, family = binomial)
summary (modelo)
summary(modelo1)
modelo <- glm (forma ~ borde, data = ceramicas, family = binomial, link='logit')
anova(modelo)
modelo <- glm (forma ~ borde ~ altura, data = ceramicas, family = binomial)
modelo <- glm (forma ~ ., data = ceramicas, family = binomial)
anova(modelo)
modelo <- glm (forma ~ borde, data = ceramicas, family = binomial)
anova(modelo)
#Con summary () obtenemos los resultados del modelo.
summary (modelo)
modelo <- glm (forma ~ borde + altura, data = ceramicas, family = binomial)
#Con summary () obtenemos los resultados del modelo.
summary (modelo)
#Con anova() analizamos la tabla de desviación.
anova(modelo)
modelo <- glm (forma ~ borde, data = ceramicas, family = binomial)
#Con summary () obtenemos los resultados del modelo.
summary (modelo)
predict(modelo, type ="response")
predicted.classes
newdata <- data.frame(borde)
probabilities <- model %>% predict(newdata, type = "response")
probabilities <- modelo %>% predict(newdata, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, "pos", "neg")
predicted.classes
predicted.classes
newdata <- data.frame(borde)
probabilities <- modelo %>% predict(newdata, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, "Kylix", "Lekythos")
predicted.classes
newdata <- data.frame(borde)
probabilities <- modelo %>% predict(newdata, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, "Lekythos", "Kylix")
predicted.classes
probabilities <- modelo %>% predict(newdata, type = "response")
probabilities <- modelo %>% predict(newdata, type = "response")
probabilities
View (probabilities)
newdataborde <- data.frame(borde)
probabilities <- modelo %>% predict(newdataborde, type = "response")
predicted.classes1 <- ifelse(probabilities > 0.5, "Lekythos", "Kylix")
predicted.classes1
newdataborde <- data.frame(borde)
probabilities <- modelo %>% predict(newdataborde, type = "response")
predicted.classes1 <- ifelse(probabilities > 0.5, "Lekythos", "Kylix")
predicted.classes1
newdataaltura <- data.frame(altura)
probabilities <- modelo %>% predict(newdataaltura, type = "response")
predicted.classes2 <- ifelse(probabilities > 0.5, "Lekythos", "Kylix")
predicted.classes2
modelo2 <- glm (forma ~ altura + borde, data = ceramicas, family = binomial)
summary(modelo2)
newdatamult <- data.frame(altura + borde)
probabilities <- modelo2 %>% predict(newdatamult, type = "response")
predicted.classes2 <- ifelse(probabilities > 0.5, "Lekythos", "Kylix")
predicted.classes2
modelo3 <- glm (forma ~ altura + borde + base, data = ceramicas, family = binomial)
summary(modelo3)
confint(object = modelo3, level = 0.95)
newdatamult2 <- data.frame(altura + borde + base)
probabilities <- modelo3 %>% predict(newdatamult2, type = "response")
predicted.classes3 <- ifelse(probabilities > 0.5, "Lekythos", "Kylix")
predicted.classes3
plot(forma ~ altura + borde, ceramicas, col = "darkblue",
main = "Modelo regresión logística",
ylab = "P(forma|altura + borde)",
xlab = "ceramicas", pch = "I")
# type = "response" devuelve las predicciones en forma de probabilidad en lugar de en log_ODDs
curve(predict(modelo2, data.frame(altura = x), type = "response"),
col = "firebrick", lwd = 2.5, add = TRUE)
plot(forma ~ altura + borde, ceramicas, col = "darkblue",
main = "Modelo regresión logística",
ylab = "P(forma|altura + borde)",
xlab = "ceramicas", pch = "I")
# type = "response" devuelve las predicciones en forma de probabilidad en lugar de en log_ODDs
curve(predict(modelo2, data.frame(altura + borde = x), type = "response"),
plot(forma ~ altura + borde, ceramicas, col = "darkblue",
main = "Modelo regresión logística",
ylab = "P(forma|altura + borde)",
xlab = "ceramicas", pch = "I")
# type = "response" devuelve las predicciones en forma de probabilidad en lugar de en log_ODDs
curve(predict(modelo2, data.frame(altura + borde = x), type = "response"),
plot(forma ~ altura + borde, ceramicas, col = "darkblue",
main = "Modelo regresión logística",
ylab = "P(forma|altura + borde)",
xlab = "ceramicas", pch = "I")
plot(forma ~ altura + borde, ceramicas, col = "darkblue",
main = "Modelo regresión logística",
ylab = "P(forma1|altura)",
xlab = "ceramicas", pch = "I")
# type = "response" devuelve las predicciones en forma de probabilidad en lugar de en log_ODDs
curve(predict(modelo2, newdatamult, type = "response"),
col = "firebrick", lwd = 2.5, add = TRUE)
plot(forma ~ altura + borde, ceramicas, col = "darkblue",
main = "Modelo regresión logística",
ylab = "P(forma1|altura)",
xlab = "ceramicas", pch = "I")
# type = "response" devuelve las predicciones en forma de probabilidad en lugar de en log_ODDs
curve(predict(modelo2, newdatamult = x, type = "response"),
col = "firebrick", lwd = 2.5, add = TRUE)
plot(forma ~ altura + borde, ceramicas, col = "darkblue",
main = "Modelo regresión logística",
ylab = "P(forma1|altura)",
xlab = "ceramicas", pch = "I")
# type = "response" devuelve las predicciones en forma de probabilidad en lugar de en log_ODDs
curve(predict(modelo2, newdatamult1 = x, type = "response"),
col = "firebrick", lwd = 2.5, add = TRUE)
plot(forma ~ altura + borde, ceramicas, col = "darkblue",
main = "Modelo regresión logística",
ylab = "P(forma1|altura)",
xlab = "ceramicas", pch = "I")
# type = "response" devuelve las predicciones en forma de probabilidad en lugar de en log_ODDs
curve(predict(modelo2, newdatamult2 = x, type = "response"),
col = "firebrick", lwd = 2.5, add = TRUE)
plot(forma ~ altura + borde, ceramicas, col = "darkblue",
main = "Modelo regresión logística",
ylab = "P(forma1|altura)",
xlab = "ceramicas", pch = "I")
# type = "response" devuelve las predicciones en forma de probabilidad en lugar de en log_ODDs
curve(predict(modelo2, newdatamult = x, type = "response"),
col = "firebrick", lwd = 2.5, add = TRUE)
plot(forma ~ altura + borde, ceramicas, col = "darkblue",
main = "Modelo regresión logística",
ylab = "P(forma1|altura)",
xlab = "ceramicas", pch = "I")
# type = "response" devuelve las predicciones en forma de probabilidad en lugar de en log_ODDs
curve(predict(modelo2, newdatamult = x, type = "response"),
col = "firebrick", lwd = 2.5, add = TRUE)
plot(forma ~ altura + borde, ceramicas, col = "darkblue",
main = "Modelo regresión logística",
ylab = "P(forma1|altura)",
xlab = "ceramicas", pch = "I")
# type = "response" devuelve las predicciones en forma de probabilidad en lugar de en log_ODDs
curve(predict(modelo2, newdatamult = x, type = "response"),
col = "firebrick", lwd = 2.5, add = TRUE)
plot(forma ~ altura + borde, ceramicas, col = "darkblue",
main = "Modelo regresión logística",
ylab = "P(forma1|altura)",
xlab = "ceramicas", pch = "I")
# type = "response" devuelve las predicciones en forma de probabilidad en lugar de en log_ODDs
curve(predict(modelo2, data.frame(newdatamult = x), type = "response"),
col = "firebrick", lwd = 2.5, add = TRUE)
confint(object = modelo3, level = 0.95)
summary(modelo3)
coef(modelo3)
summary(model3)$coef
summary(modelo3)$coef
Interpretation
coef(modelo3)
summary(modelo3)$coef
#Introducimos la tabla
library(readxl)
copas <- read_excel("E:\\trabajo\\copas2.xlsx")
#Convertimos a dataframe.Los paquetes que vamos a necesitar son Tidyverse, para una sencilla manipulación y visualización de los datos; y Caret, que facilita el machine learning y el uso de métodos complejos de clasificación y regresión.
ceramicas = as.data.frame(copas)
is.data.frame(ceramicas)
View (ceramicas)
library(ISLR)
library(tidyverse)
library(caret)
#Con el paquete DT podemos visualizar de una forma más dinámica nuestra base de datos.
library(DT)
datatable(ceramicas)
#Ahora, creamos objetos para las variables que vamos a estudiar, así facilitamos su manejo.
forma = ceramicas$Forma
tecnica = ceramicas$Tecnica
borde = na.omit (ceramicas$`Diam. Borde`)
base = na.omit (ceramicas$`Diam. Base`)
altura = na.omit (ceramicas$Altura)
#Nos aseguramos que los vectores sean numéricos y no se registran como factor o character, los convertimos con as.numeric().
borde <- as.numeric(borde)
base <- as.numeric(base)
altura <- as.numeric(altura)
#Con la función glm () ajustamos los modelos. Primero, vamos a usar la forma como variable predictora, y el diámetro del borde como variable dependiente.
modelo <- glm (forma ~ borde, data = ceramicas, family = binomial)
#Con summary () obtenemos los resultados del modelo.
summary (modelo)
#Con anova() analizamos la tabla de desviación.
anova(modelo)
confint(object = modelo, level = 0.95)
#Con la función predict() podemos, incluso, obtener una respuesta (con la opción type ="response") acerca de a qué forma pertenece cada ejemplar según su diámetro de borde.
newdataborde <- data.frame(borde)
probabilities <- modelo %>% predict(newdataborde, type = "response")
predicted.classes1 <- ifelse(probabilities > 0.5, "Lekythos", "Kylix")
predicted.classes1
#Ahora, utilizamos la altura como variable dependiente
modelo1 <- glm (forma ~ altura, data = ceramicas, family = binomial)
summary(modelo1)
confint(object = modelo1, level = 0.95)
newdataaltura <- data.frame(altura)
probabilities <- modelo %>% predict(newdataaltura, type = "response")
predicted.classes2 <- ifelse(probabilities > 0.5, "Lekythos", "Kylix")
predicted.classes2
modelo2 <- glm (forma ~ altura + borde, data = ceramicas, family = binomial)
summary(modelo2)
confint(object = modelo1, level = 0.95)
newdatamult <- data.frame(altura + borde)
probabilities <- modelo2 %>% predict(newdatamult, type = "response")
predicted.classes2 <- ifelse(probabilities > 0.5, "Lekythos", "Kylix")
predicted.classes2
modelo3 <- glm (forma ~ altura + borde + base, data = ceramicas, family = binomial)
summary(modelo3)
coef(modelo3)
summary(modelo3)$coef
newdatamult2 <- data.frame(altura + borde + base)
probabilities <- modelo3 %>% predict(newdatamult2, type = "response")
predicted.classes3 <- ifelse(probabilities > 0.5, "Lekythos", "Kylix")
predicted.classes3
ceramicas = as.data.frame(copas)
is.data.frame(ceramicas)
table(ceramicas)
library(ISLR)
library(tidyverse)
library(caret)
#Con el paquete DT podemos visualizar de una forma más dinámica nuestra base de datos.
library(DT)
forma = ceramicas$Forma
tecnica = ceramicas$Tecnica
borde = na.omit (ceramicas$`Diam. Borde`)
base = na.omit (ceramicas$`Diam. Base`)
altura = na.omit (ceramicas$Altura)
borde <- as.numeric(borde)
base <- as.numeric(base)
altura <- as.numeric(altura)
modelo <- glm (forma ~ borde, data = ceramicas, family = binomial)
#Con summary () obtenemos los resultados del modelo.
summary (modelo)
#Con anova() analizamos la tabla de desviación.
anova(modelo)
confint(object = modelo, level = 0.95)
